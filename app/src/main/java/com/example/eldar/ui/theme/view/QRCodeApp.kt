package com.example.eldar.ui.theme.view

import android.annotation.SuppressLint
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.os.Build
import androidx.annotation.RequiresApi
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement

import androidx.compose.foundation.layout.Column

import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.TextFieldValue
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.eldar.R
import com.example.eldar.ui.theme.Purple80
import com.google.zxing.BarcodeFormat
import com.google.zxing.qrcode.QRCodeWriter
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.runBlocking
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.RequestBody
import okio.IOException
import java.time.format.TextStyle

@RequiresApi(Build.VERSION_CODES.O)
@SuppressLint("UnusedMaterial3ScaffoldPaddingParameter")
@OptIn(ExperimentalMaterial3Api::class)

@Composable
fun QRCodeApp(navController: NavController){
    var textValue by remember { mutableStateOf(TextFieldValue("")) }
    var qrCodeGenerated by remember { mutableStateOf<Bitmap?>(null) }
    var qrCodeBitmap by remember { mutableStateOf<Bitmap?>(null)}
    Scaffold (
        modifier = Modifier,
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        modifier = Modifier.padding(start = 30.dp),
                        text = "Atrás")
                },
                navigationIcon = {
                    Icon(
                        modifier = Modifier
                            .size(50.dp)
                            .clickable {
                                navController.popBackStack()
                            },
                        imageVector = Icons.Filled.ArrowBack,
                        contentDescription ="")
                }
            )
        }
    ){
        Column(
            modifier = Modifier.fillMaxSize(),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {

                Spacer(modifier = Modifier.height(70.dp))
                Text(text = "Pagar con QR",
                    fontSize = 30.sp,
                    color = Color(18, 64, 118),
                    fontWeight = FontWeight.Bold,
                    fontStyle = FontStyle.Italic
                    )
            Spacer(modifier = Modifier.height(30.dp))
            Column {
                Text(
                    text = "Ingresá el importe que querés cobrar y mostrá el QR",
                    textAlign = TextAlign.Center,
                    modifier = Modifier.fillMaxWidth(),
                    fontSize = 22.sp,
                )
                Spacer(modifier = Modifier.height(30.dp))

                Column(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.Center
                    ) {

                    TextField(
                        value = textValue,
                        textStyle = androidx.compose.ui.text.TextStyle(
                            color = Color.Black, fontSize = 40.sp),
                        placeholder = {
                                      Text(text = "$",
                                          fontSize = 40.sp)
                        },

                        onValueChange = {
                            textValue = it
                        },
                        colors = TextFieldDefaults.textFieldColors(
                            containerColor = Color.White
                        )
                            )
                }
                Spacer(Modifier.height(20.dp))

            }

            if (qrCodeGenerated != null) {
                Image(
                    bitmap = qrCodeGenerated!!.asImageBitmap(),
                    contentDescription = "",
                    modifier = Modifier.size(220.dp)
                )
            } else {
                Icon(
                    painter = painterResource(id = R.drawable.baseline_qr_code_24),
                    contentDescription = "",
                    modifier = Modifier.size(220.dp)
                )
            }
            Spacer(Modifier.height(20.dp))

            RoundedButton(
                onClick = {
                    qrCodeGenerated = generateQrCode(textValue.text)
                    runBlocking(Dispatchers.IO){
                        val client = OkHttpClient()

                        val mediaType = "application/x-www-form-urlencoded".toMediaTypeOrNull()
                        val body = RequestBody.create(
                            mediaType,"bg-color=%23ffffff&fg-color=%23000000&height=128&width=128&content=http%3A%2F%2Fwww.neutrinoapi.com"
                        )
                        val request = Request.Builder()
                            .url("https://neutrinoapi-qr-code.p.rapidapi.com/qr-code")
                            .post(body)
                            .addHeader("content-type", "application/x-www-form-urlencoded")
                            .addHeader("X-RapidAPI-Key", "ddd39a3433msh436ee8767b01084p147ca1jsn30994d072c52")
                            .addHeader("X-RapidAPI-Host", "neutrinoapi-qr-code.p.rapidapi.com")
                            .build()

                        try {
                            val response = client.newCall(request).execute()
                            if (response.isSuccessful){
                                val responseBody = response.body?.bytes()
                                responseBody?.let {
                                    qrCodeBitmap = BitmapFactory.decodeByteArray(it, 0, it.size)
                                }
                            }else{
                                println("error en la solicitud")
                            }
                        }catch (e: IOException){
                            println("error al realizar la solcitud")
                        }
                    }
                },
                enabled = textValue.text.isNotEmpty(),
                text = "GENERAR QR",
                color = Color(18, 64, 118)
            )
        }
    }//CIERRA EL SCAFFOLD
}//CIERRA LA FUNCION
fun generateQrCode(text: String) : Bitmap{
    val matrix = QRCodeWriter().encode(text, BarcodeFormat.QR_CODE, 512, 512)
    val w = matrix.width
    val h = matrix.height

    val bitmap = Bitmap.createBitmap(w, h, Bitmap.Config.RGB_565)

    for (y in 0 until h){
        for (x in 0 until w){
            bitmap.setPixel(x, y, if (matrix.get(x,y,))
                android.graphics.Color.BLACK else android.graphics.Color.WHITE)
        }
    }

    return bitmap
}
@Composable
fun RoundedButton(onClick: () -> Unit,
                  enabled: Boolean,
                  text: String,
                  color: Color,){
    Button(
        onClick = onClick,
        shape = RoundedCornerShape(6.dp),
        modifier = Modifier
            .padding(20.dp)
            .height(80.dp),
        colors = ButtonDefaults.buttonColors(
            containerColor = color,
            contentColor = Color.Black
        )
    ) {
        Text(text, modifier = Modifier.padding(vertical = 6.dp),
            color = Color.White,
            fontSize = 22.sp
            )
    }
}

